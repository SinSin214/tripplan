generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ATTRIBUTE TABLES

model Role {
  id   String @id
  user User[]
}

model Tag {
  id        String @id
  type      String

  threads TagsOnThreads[]
}

model Country {
  id        String @id
  currency  String

  threads   Thread[]
}

// USER TABLES

model User {
  email        String    @id
  username     String    @unique
  displayName  String    @unique
  password     String
  isActive     Boolean   @default(false)
  avatarFileName    String?
  bio          String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  comment Comment[]
  thread  Thread[]

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @default("member")
}

// THREAD TABLES

model Thread {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String
  content     Json      @db.Json
  images      String[]
  upvote      Int       @default(0)
  downvote    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  comment Comment[]
  tags TagsOnThreads[]
  country   Country   @relation(fields: [countryId], references: [id])
  countryId   String
  creator         User   @relation(fields: [creatorUsername], references: [username])
  creatorUsername String
}

model Comment {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  upvote    Int       @default(0)
  downvote  Int       @default(0)

  creator         User   @relation(fields: [creatorUsername], references: [username])
  creatorUsername String

  parentCommentId String?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentReplies")

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String
}

model TagsOnThreads {
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId    String

  @@id([threadId, tagId])
}
